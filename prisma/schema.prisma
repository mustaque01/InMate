// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        Role     @default(STUDENT)
  phone       String?
  
  // Student-specific fields
  studentId   String?  @unique
  roomNumber  String?
  course      String?
  year        Int?
  guardianName     String?
  guardianPhone    String?
  address          String?
  emergencyContact String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings    Booking[]
  payments    Payment[]
  notices     Notice[]  @relation("NoticeRecipients")
  createdNotices Notice[] @relation("NoticeCreator")
  
  // Advanced Payment Relations
  refunds     Refund[]  @relation("UserRefunds")
  installmentPlans InstallmentPlan[] @relation("UserInstallments")
  
  // Student Feature Relations
  complaints  Complaint[] @relation("UserComplaints")
  assignedComplaints Complaint[] @relation("AssignedComplaints")
  leaveApplications LeaveApplication[] @relation("UserLeaveApplications")
  approvedApplications LeaveApplication[] @relation("ApprovedLeaveApplications")
  feedback    Feedback[] @relation("UserFeedback")
  feedbackResponses Feedback[] @relation("FeedbackResponses")
  roommateRequests RoommateRequest[] @relation("UserRoommateRequests")
  roommateResponses RoommateResponse[] @relation("UserRoommateResponses")
  createdEvents Event[] @relation("CreatedEvents")
  eventAttendees EventAttendee[] @relation("UserEventAttendees")

  @@map("users")
}

model Room {
  id              String    @id @default(cuid())
  roomNumber      String    @unique
  type            RoomType  @default(SINGLE)
  capacity        Int       @default(1)
  currentOccupancy Int      @default(0)
  floor           Int
  block           String
  monthlyRent     Float
  amenities       String?   // JSON string for amenities list
  status          RoomStatus @default(AVAILABLE)
  description     String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  bookings        Booking[]

  @@map("rooms")
}

model Booking {
  id              String        @id @default(cuid())
  userId          String
  roomId          String
  startDate       DateTime
  endDate         DateTime?
  status          BookingStatus @default(PENDING)
  monthlyRent     Float
  securityDeposit Float?
  notes           String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  room            Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  payments        Payment[]

  @@map("bookings")
}

model Payment {
  id          String      @id @default(cuid())
  userId      String
  bookingId   String?
  amount      Float
  type        PaymentType @default(RENT)
  status      PaymentStatus @default(PENDING)
  dueDate     DateTime
  paidDate    DateTime?
  method      String?     // 'cash', 'card', 'upi', 'bank_transfer'
  reference   String?     // transaction reference
  description String?
  lateFee     Float?      @default(0)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking     Booking?    @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  reminders   PaymentReminder[]
  refunds     Refund[]
  installmentPlans InstallmentPlan[]

  @@map("payments")
}

model Notice {
  id          String      @id @default(cuid())
  title       String
  content     String
  type        NoticeType  @default(GENERAL)
  priority    Priority    @default(MEDIUM)
  isActive    Boolean     @default(true)
  createdById String
  targetRole  Role?       // null means all users
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  createdBy   User        @relation("NoticeCreator", fields: [createdById], references: [id], onDelete: Cascade)
  recipients  User[]      @relation("NoticeRecipients")

  @@map("notices")
}

// Advanced Payment System Models
model PaymentReminder {
  id          String         @id @default(cuid())
  paymentId   String
  type        ReminderType   @default(DUE_DATE)
  sentDate    DateTime
  status      ReminderStatus @default(SENT)
  method      String         // 'email', 'sms', 'push'
  message     String
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  payment     Payment        @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("payment_reminders")
}

model Refund {
  id          String       @id @default(cuid())
  paymentId   String
  userId      String
  amount      Float
  reason      String
  status      RefundStatus @default(PENDING)
  processedDate DateTime?
  refundMethod  String?    // 'bank_transfer', 'cash', 'upi'
  reference   String?
  notes       String?
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  payment     Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user        User         @relation("UserRefunds", fields: [userId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

model InstallmentPlan {
  id          String       @id @default(cuid())
  paymentId   String
  userId      String
  totalAmount Float
  installments Int         // number of installments
  paidInstallments Int     @default(0)
  monthlyAmount Float
  startDate   DateTime
  status      InstallmentStatus @default(ACTIVE)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  payment     Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user        User         @relation("UserInstallments", fields: [userId], references: [id], onDelete: Cascade)
  installmentPayments InstallmentPayment[]

  @@map("installment_plans")
}

model InstallmentPayment {
  id            String        @id @default(cuid())
  planId        String
  amount        Float
  dueDate       DateTime
  paidDate      DateTime?
  status        PaymentStatus @default(PENDING)
  installmentNumber Int
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  plan          InstallmentPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("installment_payments")
}

// Student Features Models
model Complaint {
  id          String         @id @default(cuid())
  userId      String
  title       String
  description String
  category    ComplaintCategory @default(MAINTENANCE)
  priority    Priority       @default(MEDIUM)
  status      ComplaintStatus @default(OPEN)
  assignedTo  String?        // admin user id
  resolution  String?
  attachments String?        // JSON array of file URLs
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  resolvedAt  DateTime?

  // Relations
  user        User           @relation("UserComplaints", fields: [userId], references: [id], onDelete: Cascade)
  assignedAdmin User?        @relation("AssignedComplaints", fields: [assignedTo], references: [id], onDelete: SetNull)

  @@map("complaints")
}

model LeaveApplication {
  id          String            @id @default(cuid())
  userId      String
  startDate   DateTime
  endDate     DateTime
  reason      String
  description String?
  status      ApplicationStatus @default(PENDING)
  approvedBy  String?           // admin user id
  approvedAt  DateTime?
  remarks     String?
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user        User              @relation("UserLeaveApplications", fields: [userId], references: [id], onDelete: Cascade)
  approver    User?             @relation("ApprovedLeaveApplications", fields: [approvedBy], references: [id], onDelete: SetNull)

  @@map("leave_applications")
}

model Feedback {
  id          String       @id @default(cuid())
  userId      String
  category    FeedbackCategory @default(GENERAL)
  rating      Int          // 1-5 stars
  title       String
  content     String
  isAnonymous Boolean      @default(false)
  status      FeedbackStatus @default(PENDING)
  response    String?
  respondedBy String?      // admin user id
  respondedAt DateTime?
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user        User         @relation("UserFeedback", fields: [userId], references: [id], onDelete: Cascade)
  responder   User?        @relation("FeedbackResponses", fields: [respondedBy], references: [id], onDelete: SetNull)

  @@map("feedback")
}

model RoommateRequest {
  id          String              @id @default(cuid())
  userId      String
  title       String
  description String
  preferences String              // JSON object with preferences
  roomType    RoomType
  budget      Float?
  status      RoommateRequestStatus @default(ACTIVE)
  contactInfo String?             // phone/email for interested students
  
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  expiresAt   DateTime?

  // Relations
  user        User                @relation("UserRoommateRequests", fields: [userId], references: [id], onDelete: Cascade)
  responses   RoommateResponse[]

  @@map("roommate_requests")
}

model RoommateResponse {
  id          String          @id @default(cuid())
  requestId   String
  userId      String
  message     String
  contactInfo String
  status      ResponseStatus  @default(PENDING)
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  request     RoommateRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user        User            @relation("UserRoommateResponses", fields: [userId], references: [id], onDelete: Cascade)

  @@map("roommate_responses")
}

model Event {
  id          String     @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  location    String?
  category    EventCategory @default(GENERAL)
  isPublic    Boolean    @default(true)
  maxAttendees Int?
  createdById String
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  createdBy   User       @relation("CreatedEvents", fields: [createdById], references: [id], onDelete: Cascade)
  attendees   EventAttendee[]

  @@map("events")
}

model EventAttendee {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  status    AttendeeStatus @default(GOING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation("UserEventAttendees", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_attendees")
}

// Enums
enum Role {
  ADMIN
  STUDENT
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
  DORMITORY
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentType {
  RENT
  SECURITY_DEPOSIT
  MAINTENANCE_FEE
  LATE_FEE
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum NoticeType {
  GENERAL
  MAINTENANCE
  PAYMENT_REMINDER
  RULE_UPDATE
  EVENT
  EMERGENCY
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// New Enums for Advanced Payment System
enum ReminderType {
  DUE_DATE
  OVERDUE
  FINAL_NOTICE
  LATE_FEE
}

enum ReminderStatus {
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum RefundStatus {
  PENDING
  APPROVED
  PROCESSED
  REJECTED
  CANCELLED
}

enum InstallmentStatus {
  ACTIVE
  COMPLETED
  DEFAULTED
  CANCELLED
}

// New Enums for Student Features
enum ComplaintCategory {
  MAINTENANCE
  CLEANING
  SECURITY
  NOISE
  ROOMMATE
  FACILITIES
  FOOD
  OTHER
}

enum ComplaintStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum FeedbackCategory {
  GENERAL
  FACILITIES
  STAFF
  FOOD
  SECURITY
  MAINTENANCE
  SUGGESTIONS
}

enum FeedbackStatus {
  PENDING
  REVIEWED
  RESPONDED
  CLOSED
}

enum RoommateRequestStatus {
  ACTIVE
  FULFILLED
  EXPIRED
  CANCELLED
}

enum ResponseStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum EventCategory {
  GENERAL
  ACADEMIC
  CULTURAL
  SPORTS
  MAINTENANCE
  MEETING
}

enum AttendeeStatus {
  GOING
  MAYBE
  NOT_GOING
}
